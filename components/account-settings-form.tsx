"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Checkbox } from "@/components/ui/checkbox"
import { toast } from "@/components/ui/use-toast"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Loader2,
  Key,
  Cookie,
  X,
  CheckCircle,
  AlertTriangle,
  Star,
  Bot,
  MessageSquare,
  HelpCircle,
  Copy,
  Check,
  Globe,
  Shield,
  CreditCard,
} from "lucide-react"
import { apiClient, type WBAccountResponse } from "@/lib/api"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Label } from "@/components/ui/label"
import { useAccounts } from "@/lib/context/accounts-context"
import { useAuth } from "@/lib/context/auth-context"
import Link from "next/link"

interface AccountSettingsFormProps {
  accountId: string
  onComplete?: () => void
}

interface RatingSettings {
  responseEnabled: boolean
  responseType: "auto" | "fixed"
  fixedText: string
  autoMessageEnabled: boolean
  autoMessageText: string
}

interface AllRatingsSettings {
  [rating: string]: RatingSettings
}

interface GlobalSettings {
  includeSignature: boolean
  signature: string
}

interface ProxySettings {
  enabled: boolean
  protocol: "HTTP" | "HTTPS" | "SOCKS5"
  host: string
  port: number | null
  username: string
  password: string
}

const defaultSignature = "–ù–∞—à –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –æ—Ç–¥–µ–ª –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –≤ ¬´–ß–∞—Ç–µ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º¬ª –∏–ª–∏ –≤ Wh–∞ts–∞—Ä—Ä: +790123456789"

const defaultAutoMessageTemplate = `{Name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ü–æ–ª—É—á–∏–ª–∏ –≤ –æ—Ç–∑—ã–≤–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —Ç–æ–≤–∞—Ä–æ–º ¬´{Product}¬ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {Date2}, —Å—Ç–æ–∏–º–æ—Å—Ç—å {Price}.

–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —Ä–µ—à–∏—Ç –ª–∏ –ø—Ä–æ–±–ª–µ–º—É —á–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –æ–ø–ª–∞—Ç—ã? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–æ–π?`

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
function CopyCodeButton({ code, className = "" }: { code: string; className?: string }) {
  const [copied, setCopied] = useState(false)

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(code)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:", err)
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥",
        variant: "destructive",
      })
    }
  }

  return (
    <Button
      type="button"
      variant="outline"
      size="sm"
      onClick={handleCopy}
      className={`gap-2 ${className}`}
      disabled={copied}
    >
      {copied ? (
        <>
          <Check className="h-4 w-4" />
          –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!
        </>
      ) : (
        <>
          <Copy className="h-4 w-4" />
          –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        </>
      )}
    </Button>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
function InstructionDialog() {
  const authCode = `localStorage.getItem("wb-eu-passport-v2.access-token") ? (copy(localStorage.getItem("wb-eu-passport-v2.access-token")), console.log("‚úÖ –¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")) : console.warn("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");`

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button type="button" variant="outline" size="sm" className="gap-2 bg-transparent">
          <HelpCircle className="h-4 w-4" />
          –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-4xl max-h-[90vh]">
        <DialogHeader>
          <DialogTitle className="text-xl font-bold text-blue-600">
            üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ Wildberries
          </DialogTitle>
          <DialogDescription>
            –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∫–ª—é—á–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ API –∫–ª—é—á–∞
          </DialogDescription>
        </DialogHeader>
        <ScrollArea className="h-[70vh] pr-4">
          <div className="space-y-6">
            {/* –í–∞–∂–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
            <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-start gap-2">
                <AlertTriangle className="h-5 w-5 text-yellow-600 mt-0.5" />
                <div>
                  <p className="font-medium text-yellow-800">‚ö†Ô∏è –í–∞–∂–Ω–æ!</p>
                  <p className="text-sm text-yellow-700">
                    –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –≥–¥–µ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries.
                  </p>
                </div>
              </div>
            </div>

            {/* –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">üîë 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¢–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (authorizev3)</h3>

              <div className="space-y-4">
                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä</h4>
                  <p className="text-sm text-gray-600">
                    –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç{" "}
                    <a
                      href="https://seller.wildberries.ru"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 underline"
                    >
                      seller.wildberries.ru
                    </a>{" "}
                    –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
                  </p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 2: –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</h4>
                  <p className="text-sm text-gray-600 mb-2">–ù–∞–∂–º–∏—Ç–µ F12 –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à:</p>
                  <ul className="text-sm text-gray-600 space-y-1 ml-4">
                    <li>
                      ‚Ä¢ Windows: <code className="bg-gray-200 px-2 py-1 rounded">Ctrl+Shift+I</code>
                    </li>
                    <li>
                      ‚Ä¢ Mac: <code className="bg-gray-200 px-2 py-1 rounded">Cmd+Option+I</code>
                    </li>
                  </ul>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 3: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É Console</h4>
                  <p className="text-sm text-gray-600">
                    –í –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–π–¥–∏—Ç–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "Console" (–ö–æ–Ω—Å–æ–ª—å)
                  </p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 4: –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–¥</h4>
                  <p className="text-sm text-gray-600 mb-3">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å:</p>
                  <div className="relative">
                    <div className="bg-gray-900 text-gray-100 p-4 rounded-lg font-mono text-sm overflow-x-auto">
                      <code>{authCode}</code>
                    </div>
                    <div className="absolute top-2 right-2">
                      <CopyCodeButton code={authCode} />
                    </div>
                  </div>
                  <p className="text-sm text-gray-600 mt-2">–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞</p>
                </div>

                <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                  <h4 className="font-medium mb-2 text-green-800">–†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                  <p className="text-sm text-green-700">
                    –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞, –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "‚úÖ
                    –¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
                  </p>
                </div>
              </div>
            </div>

            {/* –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">
                üîê 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ö–ª—é—á–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (wbx_validation_key)
              </h3>

              <div className="space-y-4">
                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</h4>
                  <p className="text-sm text-gray-600">
                    –í —Ç–æ–º –∂–µ –±—Ä–∞—É–∑–µ—Ä–µ, –≥–¥–µ –æ—Ç–∫—Ä—ã—Ç –∫–∞–±–∏–Ω–µ—Ç Wildberries, –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)
                  </p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 2: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É Application/Storage</h4>
                  <p className="text-sm text-gray-600">
                    –ù–∞–π–¥–∏—Ç–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "Application" (–≤ Chrome) –∏–ª–∏ "Storage" (–≤ Firefox)
                  </p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 3: –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª Cookies</h4>
                  <p className="text-sm text-gray-600">–í –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª "Cookies" –∏ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ</p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 4: –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω</h4>
                  <p className="text-sm text-gray-600">
                    –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω <code className="bg-gray-200 px-2 py-1 rounded">https://seller.wildberries.ru</code>
                  </p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 5: –ù–∞–π–¥–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á</h4>
                  <p className="text-sm text-gray-600 mb-2">
                    –í —Å–ø–∏—Å–∫–µ cookies –Ω–∞–π–¥–∏—Ç–µ –ø–æ–ª–µ —Å –∏–º–µ–Ω–µ–º{" "}
                    <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded font-medium">wbx_validation_key</span>
                  </p>
                  <p className="text-sm text-gray-600">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—è (—Å—Ç–æ–ª–±–µ—Ü "Value")</p>
                </div>

                <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <p className="text-sm text-blue-700">
                    <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ
                    –ø–æ–∏—Å–∫
                  </p>
                </div>
              </div>
            </div>

            {/* –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">üîß 3. –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞</h3>

              <div className="space-y-4">
                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 1: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API</h4>
                  <p className="text-sm text-gray-600">
                    –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries –Ω–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª{" "}
                    <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded font-medium">
                      "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ‚Üí "–î–æ—Å—Ç—É–ø –∫ API"
                    </span>
                  </p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 2: –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω</h4>
                  <p className="text-sm text-gray-600 mb-2">–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:</p>
                  <ul className="text-sm text-gray-600 space-y-1 ml-4">
                    <li>‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ß—Ç–µ–Ω–∏–µ</li>
                    <li>‚úÖ –û—Ç–∑—ã–≤—ã - –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å</li>
                    <li>‚úÖ –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã - –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å</li>
                  </ul>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2">–®–∞–≥ 3: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á</h4>
                  <p className="text-sm text-gray-600">
                    –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ API –∫–ª—é—á –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
                  </p>
                </div>
              </div>
            </div>

            {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
            <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
              <div className="flex items-start gap-2">
                <AlertTriangle className="h-5 w-5 text-red-600 mt-0.5" />
                <div>
                  <p className="font-medium text-red-800">üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</p>
                  <ul className="text-sm text-red-700 space-y-1 mt-1">
                    <li>‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º</li>
                    <li>‚Ä¢ API –∫–ª—é—á –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏</li>
                    <li>‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ API –∫–ª—é—á–∏</li>
                    <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö</li>
                  </ul>
                </div>
              </div>
            </div>

            {/* –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã */}
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">‚ùì –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è</h3>

              <div className="space-y-3">
                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2 text-gray-800">–ü—Ä–æ–±–ª–µ–º–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</h4>
                  <p className="text-sm text-gray-600">
                    <strong>–†–µ—à–µ–Ω–∏–µ:</strong> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                  </p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2 text-gray-800">–ü—Ä–æ–±–ª–µ–º–∞: –ö–ª—é—á –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookies</h4>
                  <p className="text-sm text-gray-600">
                    <strong>–†–µ—à–µ–Ω–∏–µ:</strong> –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–±–∏–Ω–µ—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫. –ï—Å–ª–∏ –∫–ª—é—á –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ
                    –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
                  </p>
                </div>

                <div className="p-4 bg-gray-50 rounded-lg border">
                  <h4 className="font-medium mb-2 text-gray-800">–ü—Ä–æ–±–ª–µ–º–∞: API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç</h4>
                  <p className="text-sm text-gray-600">
                    <strong>–†–µ—à–µ–Ω–∏–µ:</strong> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–±–∏–Ω–µ—Ç–∞
                  </p>
                </div>
              </div>
            </div>
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  )
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
function normalizeAccountData(accountData: WBAccountResponse): WBAccountResponse {
  return {
    ...accountData,
    inn: accountData.inn || "",
    store_name: accountData.store_name || "",
    supplier_id: accountData.supplier_id || "",
    sid: accountData.sid || "",
    settings: {
      auto_responses: {
        marks: accountData.settings?.auto_responses?.marks || {},
        include_signature: accountData.settings?.auto_responses?.include_signature || false,
        signature: accountData.settings?.auto_responses?.signature || "",
      },
      auto_messages: accountData.settings?.auto_messages || {},
      proxy: {
        enabled: accountData.proxy_enabled || accountData.settings?.proxy?.enabled || false,
        protocol: accountData.proxy_protocol || accountData.settings?.proxy?.protocol || "HTTP",
        host: accountData.proxy_host || accountData.settings?.proxy?.host || "",
        port: accountData.proxy_port || accountData.settings?.proxy?.port || null,
        username: accountData.proxy_username || accountData.settings?.proxy?.username || "",
        password: accountData.proxy_password || accountData.settings?.proxy?.password || "",
      },
    },
    proxy_enabled: accountData.proxy_enabled || false,
    proxy_protocol: accountData.proxy_protocol || null,
    proxy_host: accountData.proxy_host || null,
    proxy_port: accountData.proxy_port || null,
    proxy_username: accountData.proxy_username || null,
    proxy_password: accountData.proxy_password || null,
  }
}

// –ò–∑–º–µ–Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç RatingSettingsCard, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function RatingSettingsCard({
  rating,
  settings,
  onSettingsChange,
}: {
  rating: string
  settings: RatingSettings
  onSettingsChange: (rating: string, newSettings: RatingSettings) => void
}) {
  const { user } = useAuth()

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const canAutoanswer = user?.features?.can_autoanswer ?? false
  const canAutodialog = user?.features?.can_autodialog ?? false

  const updateSettings = (updates: Partial<RatingSettings>) => {
    onSettingsChange(rating, { ...settings, ...updates })
  }

  const handleInsertTemplate = (type: "response" | "message") => {
    const currentText = type === "response" ? settings.fixedText : settings.autoMessageText
    const template = type === "response" ? "" : defaultAutoMessageTemplate

    if (currentText && currentText.trim() !== "") {
      if (confirm("–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–º?")) {
        if (type === "response") {
          updateSettings({ fixedText: template })
        } else {
          updateSettings({ autoMessageText: template })
        }
      }
    } else {
      if (type === "response") {
        updateSettings({ fixedText: template })
      } else {
        updateSettings({ autoMessageText: template })
      }
    }
  }

  const getRatingColor = (rating: string) => {
    const num = Number.parseInt(rating)
    if (num <= 2) return "text-red-500"
    if (num === 3) return "text-yellow-500"
    return "text-green-500"
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–ª–æ–∫ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π - —Ç–µ–ø–µ—Ä—å –¥–ª—è –æ—Ü–µ–Ω–æ–∫ 1-4
  const showAutoMessages = ["1", "2", "3", "4"].includes(rating)

  return (
    <Card className="mb-4">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2 text-lg">
          <Star className={`h-5 w-5 ${getRatingColor(rating)}`} />
          {rating} ‚òÖ
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã */}
        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <Bot className="h-4 w-4" />
            <h4 className="font-medium">–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã</h4>
          </div>

          <div className="flex flex-row items-start space-x-3 space-y-0">
            <Checkbox
              checked={settings.responseEnabled && canAutoanswer}
              onCheckedChange={(checked) => canAutoanswer && updateSettings({ responseEnabled: !!checked })}
              id={`responseEnabled-${rating}`}
              disabled={!canAutoanswer}
            />
            <div className="space-y-1 leading-none">
              <label
                htmlFor={`responseEnabled-${rating}`}
                className={`text-sm font-medium ${!canAutoanswer ? "text-gray-400" : "cursor-pointer"}`}
              >
                –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç
              </label>
            </div>
          </div>

          {settings.responseEnabled && canAutoanswer && (
            <div className="space-y-4 ml-6">
              <div className="space-y-2">
                <Label className="text-sm font-medium">–¢–∏–ø –æ—Ç–≤–µ—Ç–∞</Label>
                <RadioGroup
                  value={settings.responseType}
                  onValueChange={(value) => updateSettings({ responseType: value as "auto" | "fixed" })}
                  className="flex flex-col space-y-2"
                >
                  <div className="flex items-center space-x-3 space-y-0">
                    <RadioGroupItem value="auto" id={`auto-${rating}`} />
                    <label htmlFor={`auto-${rating}`} className="text-sm font-normal cursor-pointer">
                      –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç (GPT-4o-mini)
                    </label>
                  </div>
                  <div className="flex items-center space-x-3 space-y-0">
                    <RadioGroupItem value="fixed" id={`fixed-${rating}`} />
                    <label htmlFor={`fixed-${rating}`} className="text-sm font-normal cursor-pointer">
                      –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    </label>
                  </div>
                </RadioGroup>
              </div>

              {settings.responseType === "fixed" && (
                <div className="space-y-2">
                  <Label className="text-sm font-medium">–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞</Label>
                  <Textarea
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤"
                    className="min-h-[100px]"
                    value={settings.fixedText}
                    onChange={(e) => updateSettings({ fixedText: e.target.value })}
                  />
                </div>
              )}
            </div>
          )}
        </div>

        {/* –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ü–µ–Ω–æ–∫ 1-4 */}
        {showAutoMessages && (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <MessageSquare className="h-4 w-4" />
              <h4 className="font-medium">–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è</h4>
            </div>

            <div className="flex flex-row items-start space-x-3 space-y-0">
              <Checkbox
                checked={settings.autoMessageEnabled && canAutodialog}
                onCheckedChange={(checked) => canAutodialog && updateSettings({ autoMessageEnabled: !!checked })}
                id={`autoMessageEnabled-${rating}`}
                disabled={!canAutodialog}
              />
              <div className="space-y-1 leading-none">
                <label
                  htmlFor={`autoMessageEnabled-${rating}`}
                  className={`text-sm font-medium ${!canAutodialog ? "text-gray-400" : "cursor-pointer"}`}
                >
                  –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ
                </label>
              </div>
            </div>

            {settings.autoMessageEnabled && canAutodialog && (
              <div className="space-y-2 ml-6">
                <div className="flex items-center justify-between">
                  <Label className="text-sm font-medium">–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</Label>
                  <Button type="button" variant="outline" size="sm" onClick={() => handleInsertTemplate("message")}>
                    –®–∞–±–ª–æ–Ω
                  </Button>
                </div>
                <Textarea
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
                  className="min-h-[120px]"
                  value={settings.autoMessageText}
                  onChange={(e) => updateSettings({ autoMessageText: e.target.value })}
                />
                <div className="text-xs text-gray-500">
                  –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {"{Name}"} - –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, {"{Product}"} - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, {"{Date1}"} - –¥–∞—Ç–∞
                  –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, {"{Date2}"} - –¥–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è, {"{Date3}"} - –¥–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞, {"{Price}"} - —Ü–µ–Ω–∞
                </div>
              </div>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
const getAutoResponseStatus = (account: WBAccountResponse) => {
  if (!account.settings?.auto_responses?.marks) return false
  return Object.values(account.settings.auto_responses.marks).some((mark: any) => mark.enabled)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π - —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∫–∏ 1-4
const getAutoMessageStatus = (account: WBAccountResponse) => {
  if (!account.settings?.auto_messages) return false

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ü–µ–Ω–∫–∏ 1-4
  const relevantRatings = ["1", "2", "3", "4"]
  return Object.entries(account.settings.auto_messages)
    .filter(([rating]) => relevantRatings.includes(rating))
    .some(([_, message]: [string, any]) => message.enabled)
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–æ—Å—Ç–∞
const validateHost = (host: string): boolean => {
  if (!host || host.includes(" ") || host.includes("://")) {
    return false
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ IPv4
  const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
  if (ipv4Regex.test(host)) {
    return true
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ IPv6 (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
  const ipv6Regex = /^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$|^::1$|^::$/
  if (ipv6Regex.test(host)) {
    return true
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
  const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
  return domainRegex.test(host)
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞
const validatePort = (port: number): boolean => {
  return port >= 1 && port <= 65535
}

export function AccountSettingsForm({ accountId, onComplete }: AccountSettingsFormProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [isLoadingAccount, setIsLoadingAccount] = useState(true)
  const [accountData, setAccountData] = useState<WBAccountResponse | null>(null)
  const [accountName, setAccountName] = useState("")

  // –û—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫—É–∫–∏
  const [authorizev3, setAuthorizev3] = useState("")
  const [wbxValidationKey, setWbxValidationKey] = useState("")
  const [apiKey, setApiKey] = useState("")

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
  const [isTestingProxy, setIsTestingProxy] = useState(false)

  const { refreshAccounts } = useAccounts()
  const { user } = useAuth()

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const canAutoanswer = user?.features?.can_autoanswer ?? false
  const canAutodialog = user?.features?.can_autodialog ?? false

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
  const [allRatingsSettings, setAllRatingsSettings] = useState<AllRatingsSettings>({
    "1": {
      responseEnabled: false,
      responseType: "auto",
      fixedText: "",
      autoMessageEnabled: false,
      autoMessageText: "",
    },
    "2": {
      responseEnabled: false,
      responseType: "auto",
      fixedText: "",
      autoMessageEnabled: false,
      autoMessageText: "",
    },
    "3": {
      responseEnabled: false,
      responseType: "auto",
      fixedText: "",
      autoMessageEnabled: false,
      autoMessageText: "",
    },
    "4": {
      responseEnabled: false,
      responseType: "auto",
      fixedText: "",
      autoMessageEnabled: false,
      autoMessageText: "",
    },
    "5": {
      responseEnabled: false,
      responseType: "auto",
      fixedText: "",
      autoMessageEnabled: false,
      autoMessageText: "",
    },
  })

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [globalSettings, setGlobalSettings] = useState<GlobalSettings>({
    includeSignature: false,
    signature: "",
  })

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
  const [proxySettings, setProxySettings] = useState<ProxySettings>({
    enabled: false,
    protocol: "HTTP",
    host: "",
    port: null,
    username: "",
    password: "",
  })

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π
  const autoResponsesEnabled = accountData ? getAutoResponseStatus(accountData) : false
  const autoMessagesEnabled = accountData ? getAutoMessageStatus(accountData) : false

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
  const isProxyValid =
    proxySettings.enabled && validateHost(proxySettings.host) && proxySettings.port && validatePort(proxySettings.port)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
  useEffect(() => {
    const loadAccount = async () => {
      try {
        const account = await apiClient.getWBAccount(accountId)
        const normalizedAccount = normalizeAccountData(account)
        setAccountData(normalizedAccount)
        setAccountName(normalizedAccount.name)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É–∫–∏ –∏ API –∫–ª—é—á–∞
        setAuthorizev3(normalizedAccount.authorizev3 || "")
        setWbxValidationKey(normalizedAccount.wbx_validation_key || "")
        setApiKey(normalizedAccount.api_key || "")

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        const loadedSettings: AllRatingsSettings = {}
        for (const rating of ["1", "2", "3", "4", "5"]) {
          const autoResponse = normalizedAccount.settings.auto_responses.marks[rating] || {
            enabled: false,
            response_type: "auto",
            fixed_text: "",
          }

          const autoMessage = normalizedAccount.settings.auto_messages[rating] || {
            enabled: false,
            message_text: "",
          }

          loadedSettings[rating] = {
            responseEnabled: autoResponse.enabled,
            responseType: autoResponse.response_type,
            fixedText: autoResponse.fixed_text,
            autoMessageEnabled: autoMessage.enabled,
            autoMessageText: autoMessage.message_text,
          }
        }

        setAllRatingsSettings(loadedSettings)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        setGlobalSettings({
          includeSignature: normalizedAccount.settings.auto_responses.include_signature,
          signature: normalizedAccount.settings.auto_responses.signature,
        })

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
        setProxySettings(normalizedAccount.settings.proxy)
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞:", error)
        toast({
          title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞",
          variant: "destructive",
        })
      } finally {
        setIsLoadingAccount(false)
      }
    }

    loadAccount()
  }, [accountId])

  const handleRatingSettingsChange = (rating: string, newSettings: RatingSettings) => {
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –∏–ª–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const updatedSettings = { ...newSettings }

    if (!canAutoanswer) {
      updatedSettings.responseEnabled = allRatingsSettings[rating].responseEnabled
      updatedSettings.responseType = allRatingsSettings[rating].responseType
      updatedSettings.fixedText = allRatingsSettings[rating].fixedText
    }

    if (!canAutodialog) {
      updatedSettings.autoMessageEnabled = allRatingsSettings[rating].autoMessageEnabled
      updatedSettings.autoMessageText = allRatingsSettings[rating].autoMessageText
    }

    setAllRatingsSettings((prev) => ({
      ...prev,
      [rating]: updatedSettings,
    }))
  }

  const handleInsertSignatureTemplate = () => {
    if (globalSettings.signature && globalSettings.signature.trim() !== "") {
      if (confirm("–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å—å —à–∞–±–ª–æ–Ω–æ–º?")) {
        setGlobalSettings((prev) => ({ ...prev, signature: defaultSignature }))
      }
    } else {
      setGlobalSettings((prev) => ({ ...prev, signature: defaultSignature }))
    }
  }

  const handleTestProxyConnection = async () => {
    if (!isProxyValid) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏",
        variant: "destructive",
      })
      return
    }

    if (!accountData?.sid) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å sid –∞–∫–∫–∞—É–Ω—Ç–∞",
        variant: "destructive",
      })
      return
    }

    setIsTestingProxy(true)

    try {
      const result = await apiClient.testProxyConnection({
        protocol: proxySettings.protocol,
        host: proxySettings.host,
        port: proxySettings.port!,
        username: proxySettings.username || undefined,
        password: proxySettings.password || undefined,
        sid: accountData.sid,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ result.data –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ result)
      const responseData = result.data || result
      const checks = responseData?.Checks || {}
      const overall = responseData?.Overall

      if (overall && checks) {
        // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
        const checkMessages = []

        if (checks.MyIP === "OK") {
          checkMessages.push("‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        } else {
          checkMessages.push("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        }

        if (checks.WB_API === "OK") {
          checkMessages.push("‚úÖ –î–æ—Å—Ç—É–ø –∫ API WB")
        } else {
          checkMessages.push("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API WB")
        }

        if (checks.WB_LK === "OK") {
          checkMessages.push("‚úÖ –î–æ—Å—Ç—É–ø –∫ –õ–ö WB")
        } else {
          checkMessages.push("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –õ–ö WB")
        }

        const isAllOk = overall === "OK"

        toast({
          title: isAllOk ? "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–∞" : "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏",
          description: checkMessages.join(", "),
          variant: isAllOk ? "default" : "destructive",
        })
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
          description: result.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏",
          variant: "destructive",
        })
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏:", error)
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
        variant: "destructive",
      })
    } finally {
      setIsTestingProxy(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    try {
      if (!accountData) {
        throw new Error("–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const updatedSettings = {
        auto_responses: {
          marks: {} as any,
          include_signature: globalSettings.includeSignature,
          signature: globalSettings.signature || "",
        },
        auto_messages: {} as any,
      }

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
      for (const [rating, settings] of Object.entries(allRatingsSettings)) {
        updatedSettings.auto_responses.marks[rating] = {
          enabled: settings.responseEnabled,
          response_type: settings.responseType,
          fixed_text: settings.fixedText || "",
        }

        updatedSettings.auto_messages[rating] = {
          enabled: settings.autoMessageEnabled,
          message_text: settings.autoMessageText || "",
        }
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData: any = {
        name: accountName,
        settings: updatedSettings,
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        proxy_enabled: proxySettings.enabled,
        proxy_protocol: proxySettings.enabled ? proxySettings.protocol : null,
        proxy_host: proxySettings.enabled && proxySettings.host ? proxySettings.host : null,
        proxy_port: proxySettings.enabled && proxySettings.port ? proxySettings.port : null,
        proxy_username: proxySettings.enabled && proxySettings.username ? proxySettings.username : null,
        proxy_password: proxySettings.enabled && proxySettings.password ? proxySettings.password : null,
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫—É–∫–∏ –∏ API –∫–ª—é—á –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      if (authorizev3.trim()) {
        updateData.authorizev3 = authorizev3.trim()
      }
      if (wbxValidationKey.trim()) {
        updateData.wbx_validation_key = wbxValidationKey.trim()
      }
      if (apiKey.trim()) {
        updateData.api_key = apiKey.trim()
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const updatedAccount = await apiClient.updateWBAccount(accountId, updateData)
      const normalizedUpdatedAccount = normalizeAccountData(updatedAccount)
      setAccountData(normalizedUpdatedAccount)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      await refreshAccounts()

      toast({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        description: "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
      })

      // –ï—Å–ª–∏ –µ—Å—Ç—å callback, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
      if (onComplete) {
        onComplete()
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error)

      let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
      if (error instanceof Error) {
        errorMessage = error.message
      }

      toast({
        title: "–û—à–∏–±–∫–∞",
        description: errorMessage,
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  if (isLoadingAccount) {
    return (
      <div className="space-y-6">
        {/* –ü—Ä–µ–ª–æ–∞–¥–µ—Ä –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ */}
        <Card>
          <CardHeader className="pb-3">
            <div className="space-y-2">
              <div className="h-6 bg-gray-200 rounded animate-pulse w-48"></div>
              <div className="h-4 bg-gray-200 rounded animate-pulse w-64"></div>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="h-4 bg-gray-200 rounded animate-pulse w-32"></div>
                <div className="h-10 bg-gray-200 rounded animate-pulse"></div>
              </div>
              <div className="space-y-2">
                <div className="h-4 bg-gray-200 rounded animate-pulse w-64"></div>
                <div className="h-10 bg-gray-200 rounded animate-pulse"></div>
              </div>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="h-4 bg-gray-200 rounded animate-pulse w-24"></div>
                <div className="h-10 bg-gray-200 rounded animate-pulse"></div>
              </div>
              <div className="space-y-2">
                <div className="h-4 bg-gray-200 rounded animate-pulse w-32"></div>
                <div className="h-10 bg-gray-200 rounded animate-pulse"></div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –ü—Ä–µ–ª–æ–∞–¥–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <Card>
          <CardHeader className="pb-3">
            <div className="space-y-2">
              <div className="h-6 bg-gray-200 rounded animate-pulse w-48"></div>
              <div className="h-4 bg-gray-200 rounded animate-pulse w-64"></div>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-4">
              <div className="h-5 bg-gray-200 rounded animate-pulse w-32"></div>
              <div className="space-y-3">
                <div className="space-y-2">
                  <div className="h-4 bg-gray-200 rounded animate-pulse w-24"></div>
                  <div className="h-10 bg-gray-200 rounded animate-pulse"></div>
                </div>
                <div className="space-y-2">
                  <div className="h-4 bg-gray-200 rounded animate-pulse w-32"></div>
                  <div className="h-10 bg-gray-200 rounded animate-pulse"></div>
                </div>
              </div>
            </div>
            <div className="space-y-2">
              <div className="h-4 bg-gray-200 rounded animate-pulse w-24"></div>
              <div className="h-10 bg-gray-200 rounded animate-pulse"></div>
            </div>
          </CardContent>
        </Card>

        {/* –ü—Ä–µ–ª–æ–∞–¥–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ */}
        <Card>
          <CardHeader className="pb-3">
            <div className="space-y-2">
              <div className="h-6 bg-gray-200 rounded animate-pulse w-48"></div>
              <div className="h-4 bg-gray-200 rounded animate-pulse w-64"></div>
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            {[...Array(5)].map((_, i) => (
              <Card key={i}>
                <CardHeader className="pb-3">
                  <div className="h-5 bg-gray-200 rounded animate-pulse w-16"></div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="h-4 bg-gray-200 rounded animate-pulse w-32"></div>
                    <div className="h-20 bg-gray-200 rounded animate-pulse"></div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </CardContent>
        </Card>

        {/* –ü—Ä–µ–ª–æ–∞–¥–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ */}
        <div className="flex flex-col sm:flex-row justify-end gap-3 sm:gap-4 pt-4 sm:pt-6 border-t">
          <div className="h-10 bg-gray-200 rounded animate-pulse w-full sm:w-24"></div>
          <div className="h-10 bg-gray-200 rounded animate-pulse w-full sm:w-32"></div>
        </div>
      </div>
    )
  }

  if (!accountData) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="text-center">
          <AlertTriangle className="h-8 w-8 text-red-500 mx-auto mb-2" />
          <p className="text-gray-500">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
        </div>
      </div>
    )
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4 sm:space-y-6">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ */}
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-lg sm:text-xl">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ</CardTitle>
          <CardDescription className="text-sm">–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm font-medium text-gray-700">–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</Label>
              <Input
                value={accountName}
                onChange={(e) => setAccountName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"
                className="mt-1"
              />
            </div>
            <div>
              <Label className="text-sm font-medium text-gray-700">–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</Label>
              <Input value={accountData.store_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"} readOnly className="bg-gray-50 mt-1" />
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <div>
              <Label className="text-sm font-medium text-gray-700">–ò–ù–ù</Label>
              <Input value={accountData.inn || "–ù–µ —É–∫–∞–∑–∞–Ω"} readOnly className="bg-gray-50 mt-1" />
            </div>
            <div>
              <Label className="text-sm font-medium text-gray-700">ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</Label>
              <Input value={accountData.supplier_id || "–ù–µ —É–∫–∞–∑–∞–Ω"} readOnly className="bg-gray-50 mt-1" />
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <Label className="text-sm font-medium text-gray-700">–°—Ç–∞—Ç—É—Å –∫—É–∫–∏</Label>
                {accountData.cookie_status ? (
                  <Badge className="flex items-center gap-1 bg-green-100 text-green-800 hover:bg-green-100">
                    <CheckCircle className="h-3 w-3" /> –ê–∫—Ç–∏–≤–Ω–∞
                  </Badge>
                ) : (
                  <Badge className="flex items-center gap-1 bg-red-100 text-red-800 hover:bg-red-100">
                    <X className="h-3 w-3" /> –û—à–∏–±–∫–∞
                  </Badge>
                )}
              </div>

              <div className="flex justify-between items-center">
                <Label className="text-sm font-medium text-gray-700">–°—Ç–∞—Ç—É—Å API</Label>
                {accountData.api_status ? (
                  <Badge className="flex items-center gap-1 bg-green-100 text-green-800 hover:bg-green-100">
                    <CheckCircle className="h-3 w-3" /> –ê–∫—Ç–∏–≤–µ–Ω
                  </Badge>
                ) : (
                  <Badge className="flex items-center gap-1 bg-red-100 text-red-800 hover:bg-red-100">
                    <X className="h-3 w-3" /> –û—à–∏–±–∫–∞
                  </Badge>
                )}
              </div>

              <div className="flex justify-between items-center">
                <Label className="text-sm font-medium text-gray-700">–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ</Label>
                {accountData.match_status ? (
                  <Badge className="flex items-center gap-1 bg-green-100 text-green-800 hover:bg-green-100">
                    <CheckCircle className="h-3 w-3" /> –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                  </Badge>
                ) : (
                  <Badge variant="secondary" className="flex items-center gap-1">
                    <AlertTriangle className="h-3 w-3" /> –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                  </Badge>
                )}
              </div>
            </div>

            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <Label className="text-sm font-medium text-gray-700">–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã</Label>
                {autoResponsesEnabled ? (
                  <Badge className="flex items-center gap-1 bg-green-100 text-green-800 hover:bg-green-100">
                    <CheckCircle className="h-3 w-3" /> –í–∫–ª—é—á–µ–Ω—ã
                  </Badge>
                ) : (
                  <Badge variant="secondary" className="flex items-center gap-1">
                    –í—ã–∫–ª—é—á–µ–Ω—ã
                  </Badge>
                )}
              </div>

              <div className="flex justify-between items-center">
                <Label className="text-sm font-medium text-gray-700">–ê–≤—Ç–æ–¥–∏–∞–ª–æ–≥–∏</Label>
                {autoMessagesEnabled ? (
                  <Badge className="flex items-center gap-1 bg-green-100 text-green-800 hover:bg-green-100">
                    <CheckCircle className="h-3 w-3" /> –í–∫–ª—é—á–µ–Ω—ã
                  </Badge>
                ) : (
                  <Badge variant="secondary" className="flex items-center gap-1">
                    –í—ã–∫–ª—é—á–µ–Ω—ã
                  </Badge>
                )}
              </div>

              <div className="flex justify-between items-center">
                <Label className="text-sm font-medium text-gray-700">–ü—Ä–æ–∫—Å–∏</Label>
                {proxySettings.enabled ? (
                  <Badge className="flex items-center gap-1 bg-blue-100 text-blue-800 hover:bg-blue-100">
                    <Globe className="h-3 w-3" /> –í–∫–ª—é—á–µ–Ω
                  </Badge>
                ) : (
                  <Badge variant="secondary" className="flex items-center gap-1">
                    –í—ã–∫–ª—é—á–µ–Ω
                  </Badge>
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3">
            <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
              <Key className="h-5 w-5" />
              –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            </CardTitle>
            <InstructionDialog />
          </div>
          <CardDescription className="text-sm">–û–±–Ω–æ–≤–∏—Ç–µ –∫—É–∫–∏ –∏ API –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-4">
            <h3 className="text-base sm:text-lg font-medium flex items-center gap-2">
              <Cookie className="h-5 w-5" />
              Cookie –¥–∞–Ω–Ω—ã–µ
            </h3>
            <div className="space-y-3">
              <div>
                <Label className="text-sm font-medium text-gray-700">authorizev3</Label>
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ authorizev3"
                  value={authorizev3}
                  onChange={(e) => setAuthorizev3(e.target.value)}
                  className="mt-1"
                />
              </div>
              <div>
                <Label className="text-sm font-medium text-gray-700">wbx-validation-key</Label>
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ wbx-validation-key"
                  value={wbxValidationKey}
                  onChange={(e) => setWbxValidationKey(e.target.value)}
                  className="mt-1"
                />
              </div>
            </div>
          </div>

          <div>
            <Label className="text-sm font-medium text-gray-700 flex items-center gap-2">
              <Key className="h-4 w-4" />
              API –∫–ª—é—á
            </Label>
            <Input
              placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Wildberries"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              className="mt-1"
            />
            <div className="text-xs text-gray-500 mt-1">
              API –∫–ª—é—á —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏
            </div>
          </div>
        </CardContent>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ */}
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center gap-2 text-lg sm:text-xl">
            <Globe className="h-5 w-5" />
            –ü—Ä–æ–∫—Å–∏
          </CardTitle>
          <CardDescription className="text-sm">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wildberries</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex flex-row items-start space-x-3 space-y-0">
            <Checkbox
              checked={proxySettings.enabled}
              onCheckedChange={(checked) => {
                if (checked && !accountData?.sid) {
                  toast({
                    title: "–¢—Ä–µ–±—É–µ—Ç—Å—è sid –∞–∫–∫–∞—É–Ω—Ç–∞",
                    description: "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º sid –∞–∫–∫–∞—É–Ω—Ç–∞",
                    variant: "destructive",
                  })
                  return
                }
                setProxySettings((prev) => ({ ...prev, enabled: !!checked }))
              }}
              id="proxyEnabled"
              disabled={!accountData?.sid}
            />
            <div className="space-y-1 leading-none">
              <label htmlFor="proxyEnabled" className="text-sm font-medium cursor-pointer">
                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏
              </label>
              {!accountData?.sid && (
                <div className="text-xs text-gray-500">–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º sid –∞–∫–∫–∞—É–Ω—Ç–∞</div>
              )}
            </div>
          </div>

          {proxySettings.enabled && (
            <div className="space-y-4 ml-6">
              <div className="space-y-2">
                <Label className="text-sm font-medium">–ü—Ä–æ—Ç–æ–∫–æ–ª</Label>
                <Select
                  value={proxySettings.protocol}
                  onValueChange={(value: "HTTP" | "HTTPS" | "SOCKS5") =>
                    setProxySettings((prev) => ({ ...prev, protocol: value }))
                  }
                >
                  <SelectTrigger className="w-full sm:w-48">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="HTTP">HTTP</SelectItem>
                    <SelectItem value="HTTPS">HTTPS</SelectItem>
                    <SelectItem value="SOCKS5">SOCKS5</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label className="text-sm font-medium">Host</Label>
                  <Input
                    placeholder="proxy.example.com –∏–ª–∏ 192.168.1.10"
                    value={proxySettings.host}
                    onChange={(e) => setProxySettings((prev) => ({ ...prev, host: e.target.value }))}
                    className={!validateHost(proxySettings.host) && proxySettings.host ? "border-red-500" : ""}
                  />
                  {!validateHost(proxySettings.host) && proxySettings.host && (
                    <div className="text-xs text-red-500">
                      –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–æ—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è –∏–ª–∏ IP-–∞–¥—Ä–µ—Å –±–µ–∑ —Å—Ö–µ–º—ã
                    </div>
                  )}
                </div>

                <div className="space-y-2">
                  <Label className="text-sm font-medium">Port</Label>
                  <Input
                    type="number"
                    min="1"
                    max="65535"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç"
                    value={proxySettings.port || ""}
                    onChange={(e) =>
                      setProxySettings((prev) => ({
                        ...prev,
                        port: e.target.value ? Number.parseInt(e.target.value) : null,
                      }))
                    }
                    className={proxySettings.port && !validatePort(proxySettings.port) ? "border-red-500" : ""}
                  />
                  {proxySettings.port && !validatePort(proxySettings.port) && (
                    <div className="text-xs text-red-500">–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 65535</div>
                  )}
                </div>
              </div>

              <div className="space-y-2">
                <Label className="text-sm font-medium">–õ–æ–≥–∏–Ω</Label>
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
                  value={proxySettings.username}
                  onChange={(e) => setProxySettings((prev) => ({ ...prev, username: e.target.value }))}
                />
              </div>

              <div className="space-y-2">
                <Label className="text-sm font-medium">–ü–∞—Ä–æ–ª—å</Label>
                <Input
                  type="text"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  value={proxySettings.password}
                  onChange={(e) => setProxySettings((prev) => ({ ...prev, password: e.target.value }))}
                />
              </div>

              <div className="flex justify-end">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleTestProxyConnection}
                  disabled={!isProxyValid || isTestingProxy}
                  className="gap-2 bg-transparent"
                >
                  {isTestingProxy ? (
                    <>
                      <Loader2 className="h-4 w-4 animate-spin" />
                      –ü—Ä–æ–≤–µ—Ä–∫–∞...
                    </>
                  ) : (
                    <>
                      <Shield className="h-4 w-4" />
                      –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    </>
                  )}
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ */}
      <Card>
        <CardHeader className="pb-3">
          <CardTitle className="text-lg sm:text-xl">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</CardTitle>
          <CardDescription className="text-sm">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ü–µ–Ω–∫–∏</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4 sm:space-y-6">
          {/* –û–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π */}
          {(!canAutoanswer || !canAutodialog) && (
            <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg mb-6">
              <div className="flex items-start gap-3">
                <CreditCard className="h-5 w-5 text-blue-600 mt-0.5" />
                <div className="flex-1">
                  <p className="font-medium text-blue-800 mb-1">–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</p>
                  <div className="text-sm text-blue-700 mb-3">
                    {!canAutoanswer && !canAutodialog && (
                      <p>
                        –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º
                        —Ñ—É–Ω–∫—Ü–∏—è–º.
                      </p>
                    )}
                    {!canAutoanswer && canAutodialog && (
                      <p>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.</p>
                    )}
                    {canAutoanswer && !canAutodialog && (
                      <p>–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.</p>
                    )}
                  </div>
                  <Link href="/dashboard/billing">
                    <Button size="sm" className="gap-2">
                      <CreditCard className="h-4 w-4" />
                      –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
                    </Button>
                  </Link>
                </div>
              </div>
            </div>
          )}

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ü–µ–Ω–∫–∏ */}
          {["1", "2", "3", "4", "5"].map((rating) => (
            <RatingSettingsCard
              key={rating}
              rating={rating}
              settings={allRatingsSettings[rating]}
              onSettingsChange={handleRatingSettingsChange}
            />
          ))}

          {/* –ü–æ–¥–ø–∏—Å—å –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-base sm:text-lg">–ü–æ–¥–ø–∏—Å—å –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤</CardTitle>
              <CardDescription className="text-sm">
                –û–±—â–∞—è –ø–æ–¥–ø–∏—Å—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫–æ –≤—Å–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex flex-row items-start space-x-3 space-y-0">
                <Checkbox
                  checked={globalSettings.includeSignature && canAutoanswer}
                  onCheckedChange={(checked) =>
                    canAutoanswer && setGlobalSettings((prev) => ({ ...prev, includeSignature: !!checked }))
                  }
                  id="includeSignature"
                  disabled={!canAutoanswer}
                />
                <div className="space-y-1 leading-none">
                  <label
                    htmlFor="includeSignature"
                    className={`text-sm font-medium ${!canAutoanswer ? "text-gray-400" : "cursor-pointer"}`}
                  >
                    –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—å –∫–æ –≤—Å–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º
                  </label>
                </div>
              </div>

              {globalSettings.includeSignature && canAutoanswer && (
                <div className="space-y-2">
                  <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                    <Label className="text-sm font-medium">–¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏</Label>
                    <Button type="button" variant="outline" size="sm" onClick={handleInsertSignatureTemplate}>
                      –®–∞–±–ª–æ–Ω
                    </Button>
                  </div>
                  <Textarea
                    placeholder={defaultSignature}
                    className="min-h-[80px]"
                    value={globalSettings.signature}
                    onChange={(e) => setGlobalSettings((prev) => ({ ...prev, signature: e.target.value }))}
                  />
                  <div className="text-xs text-gray-500">
                    –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–∏—Ñ—Ä—ã –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å–∏–º–≤–æ–ª—ã, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–∫–≤—ã –∏–∑–º–µ–Ω–µ–Ω—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </CardContent>
      </Card>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex flex-col sm:flex-row justify-end gap-3 sm:gap-4 pt-4 sm:pt-6 border-t">
        <Button
          type="button"
          variant="outline"
          onClick={onComplete}
          disabled={isLoading}
          className="w-full sm:w-auto bg-transparent"
        >
          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        </Button>
        <Button type="submit" disabled={isLoading} className="w-full sm:w-auto">
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
            </>
          ) : (
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
          )}
        </Button>
      </div>
    </form>
  )
}
